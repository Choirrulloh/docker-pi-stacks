---
version: '3.7'

services:

########################################################################################
# Watchtower
# https://github.com/containrrr/watchtower
# As an alternative to Watchtower, look at https://github.com/pyouroboros/ouroboros
########################################################################################

  watchtower: # https://github.com/containrrr/watchtower
    container_name: watchtower
    restart: always
    image: containrrr/watchtower:armhf-latest
    environment:
      - TZ=${TZ}
      #- WATCHTOWER_NOTIFICATIONS=email
      #- WATCHTOWER_NOTIFICATION_EMAIL_FROM=${EMAIL_FROM}
      #- WATCHTOWER_NOTIFICATION_EMAIL_TO=${EMAIL_TO}
      #- WATCHTOWER_NOTIFICATION_EMAIL_SERVER=smtp.gmail.com
      #- WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=${EMAIL_FROM}
      #- WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=${EMAIL_PASSWORD}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend
    # Cron Expression of 6 fields: <second> <minute> <hour> <day-of-month> <month> <day-of-week>
    command: --schedule "0 30 3 * * *" --cleanup
    # Checks for new container images everyday at 3:30am

########################################################################################
# DuckDNS
# https://hub.docker.com/r/linuxserver/duckdns
########################################################################################

  duckdns:
    image: linuxserver/duckdns
    container_name: duckdns
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - SUBDOMAINS=${DUCKDNS_SUBDOMAINS}
      - TOKEN=${DUCKDNS_TOKEN}
      - LOG_FILE=true #optional
    volumes:
      - ${CONFIG_DIR}/duckdns:/config #optional
    networks:
      - backend
    restart: unless-stopped

########################################################################################
# oauth2
# https://quay.io/repository/pusher/oauth2_proxy
# https://github.com/pusher/oauth2_proxy
# https://github.com/pusher/oauth2_proxy/issues/46
########################################################################################

  oauth2:
    container_name: oauth2
    image: quay.io/pusher/oauth2_proxy:latest-armv6
    command:
      - "-cookie-domain=${FQDN}"
      - "-cookie-secure=true"
      - "-email-domain=*"
      - "-github-org=${GITHUB_ORG}"
      - "-http-address=0.0.0.0:4180"
      - "-pass-access-token"
      - "-provider=github"
      - "-redirect-url=https://${FQDN}/oauth2/callback"
      - "-set-authorization-header"
      - "-set-xauthrequest"
      - "-whitelist-domain=.${FQDN}"
    environment:
      - "OAUTH2_PROXY_CLIENT_ID=${GITHUB_OAUTH_CLIENT_ID}"
      - "OAUTH2_PROXY_CLIENT_SECRET=${GITHUB_OAUTH_CLIENT_SECRET}"
      - "OAUTH2_PROXY_COOKIE_SECRET=${OAUTH2_PROXY_COOKIE_SECRET}"
    expose:
      - "4180"
    #ports:
      #- 4180:4180
    labels:
      # Traefik Routing
      - "traefik.enable=true"
      # OAuth 2.0 Configuration
      - "traefik.http.routers.oauth.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue
      - "traefik.http.routers.oauth.rule=HostRegexp:{subdomain:.+}.${FQDN},${FQDN}; PathPrefix:/oauth2" #Need to change
      #- "traefik.http.routers.oauth.rule=HostRegexp(`${FQDN}`, `{subdomain:[a-z]+}.${FQDN}`, ...) #Follow this example
      - "traefik.http.routers.oauth.entrypoints=websecure"
      - "traefik.http.services.oauth.loadbalancer.server.port=4180"  #used to be traefik.port
      # Require OAuth 2.0 for authentication
      - "traefik.http.middlewares.test-auth.forwardauth.address=https://${FQDN}/oauth2/auth"
      - "traefik.http.middlewares.test-auth.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.test-auth.forwardauth.authResponseHeaders=X-Auth-User, X-Secret"
    networks:
      - backend
    restart: unless-stopped

##########################################################################
# Traefik v2.0
# https://docs.traefik.io/v2.0/getting-started/quick-start/
##########################################################################

  reverse-proxy:
    # The official v2.0 Traefik docker image
    image: traefik:v2.0
    container_name: traefik
    # Enables the web UI and tells Traefik to listen to docker
    restart: always
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # Enable a dns challenge named "mydnschallenge"
      - "--certificatesresolvers.mydnschallenge.acme.dnschallenge=true"
      # Tell which provider to use
      - "--certificatesresolvers.mydnschallenge.acme.dnschallenge.provider=duckdns" # https://docs.traefik.io/v2.0/https/acme/
      #- "--certificatesresolvers.mydnschallenge.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.mydnschallenge.acme.email=${EMAIL}"
      - "--certificatesresolvers.mydnschallenge.acme.storage=/letsencrypt/acme.json"
    ports:
      - 80:80 # The HTTP port
      - 443:443 # The Secure Web port
      - 8080:8080 # The Web UI (enabled by --api.insecure=true)
    environment:
      # For Duck DNS
      - DUCKDNS_TOKEN=${DUCKDNS_TOKEN}
      # For Cloudflare
      #- CF_API_EMAIL
      #- CF_API_KEY # Use the Global API Key, not the Origin CA Key 
    volumes:
      - ${CONFIG_DIR}/letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro # So that Traefik can listen to the Docker events
    networks:
      - backend
    labels:
      # Traefik Routing
      - "traefik.enable=true"
      - "traefik.http.routers.reverse-proxy.rule=Host(`traefik.${FQDN}`)"
      - "traefik.http.routers.reverse-proxy.entrypoints=websecure"
      - "traefik.http.routers.reverse-proxy.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue
      # Require OAuth 2.0 for authentication
      - "traefik.http.middlewares.test-auth.forwardauth.address=https://${FQDN}/oauth2/auth"
      - "traefik.http.middlewares.test-auth.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.test-auth.forwardauth.authResponseHeaders=X-Auth-User, X-Secret"

########################################################################################
# netdata
# https://hub.docker.com/r/netdata/netdata
########################################################################################

  netdata:
    image: netdata/netdata:latest
    container_name: netdata
    hostname: ${FQDN} # set to fqdn of host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - PGID=996
    #ports:
      #- 19999:19999
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    networks:
      - backend
    labels:
      # Traefik Routing
      - "traefik.enable=true"
      - "traefik.http.routers.netdata.rule=Host(`netdata.${FQDN}`)"
      - "traefik.http.routers.netdata.entrypoints=websecure"
      - "traefik.http.routers.netdata.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue
      # Require OAuth 2.0 for authentication
      - "traefik.http.middlewares.test-auth.forwardauth.address=https://${FQDN}/oauth2/auth"
      - "traefik.http.middlewares.test-auth.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.test-auth.forwardauth.authResponseHeaders=X-Auth-User, X-Secret"

########################################################################################
# Downloaders
# https://hub.docker.com/r/haugene/transmission-openvpn/
########################################################################################

  transmission-vpn:
    container_name: transmission-vpn
    image: haugene/transmission-openvpn:latest-armhf
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    restart: unless-stopped
    #ports:
    #- "XXXX:9091"
    dns:
      - 1.1.1.1
      - 1.0.0.1
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIG_DIR}/transmission-vpn:/data
      - ${EXTHDD_DIR}/downloads/torrents/watch:/data/watch
      - ${EXTHDD_DIR}/downloads/torrents/complete:/data/completed
      - ${EXTHDD_DIR}/downloads/torrents/incomplete:/data/incomplete
      - ${CONFIG_DIR}/transmission-vpn/openvpn:/etc/openvpn/torguard-custom
    environment:
      - OPENVPN_PROVIDER=TORGUARD
      #- OPENVPN_PROVIDER=TORGUARD-CUSTOM
      - OPENVPN_USERNAME=${OPENVPN_USERNAME}
      - OPENVPN_PASSWORD=${OPENVPN_PASSWORD}
      - OPENVPN_CONFIG=USA-SEATTLE
      #- OPENVPN_CONFIG=TorGuard.USA.Seattle.STATIC
      - OPENVPN_OPTS=--inactive 3600 --ping 10 --ping-exit 60
      - LOCAL_NETWORK=192.168.1.0/24
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - TRANSMISSION_RPC_AUTHENTICATION_REQUIRED=false
      #- TRANSMISSION_RPC_HOST_WHITELIST="127.0.0.1,192.168.*.*"
      #- TRANSMISSION_RPC_USERNAME=${TRANSMISSION_USERNAME}
      #- TRANSMISSION_RPC_PASSWORD=${TRANSMISSION_PASSWORD}
      - TRANSMISSION_UMASK=002
      - TRANSMISSION_RATIO_LIMIT=0.4999
      - TRANSMISSION_RATIO_LIMIT_ENABLED=true
      - TRANSMISSION_WEB_UI=combustion
    networks:
      - backend
    labels:
      # Traefik Routing
      - "traefik.enable=true"
      - "traefik.http.routers.transmission-vpn.rule=Host(`transmission.${FQDN}`)"
      - "traefik.http.routers.transmission-vpn.entrypoints=websecure"
      - "traefik.http.routers.transmission-vpn.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue
      # Require OAuth 2.0 for authentication
      - "traefik.http.middlewares.test-auth.forwardauth.address=https://${FQDN}/oauth2/auth"
      - "traefik.http.middlewares.test-auth.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.test-auth.forwardauth.authResponseHeaders=X-Auth-User, X-Secret"

########################################################################################
# Indexers
# https://hub.docker.com/r/linuxserver/jackett
# https://hub.docker.com/r/linuxserver/radarr
# https://hub.docker.com/r/linuxserver/sonarr
########################################################################################

  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONFIG_DIR}/sonarr:/config
      - ${EXTHDD_DIR}/media/tv:/tv
      - ${EXTHDD_DIR}/downloads:/downloads
      - "/etc/localtime:/etc/localtime:ro"
    #ports:
      #- 8989:8989
    restart: unless-stopped
    networks:
      - backend
    labels:
      # Traefik Routing
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.${FQDN}`)"
      - "traefik.http.routers.sonarr.entrypoints=websecure"
      - "traefik.http.routers.sonarr.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue
      # Require OAuth 2.0 for authentication
      - "traefik.http.middlewares.test-auth.forwardauth.address=https://${FQDN}/oauth2/auth"
      - "traefik.http.middlewares.test-auth.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.test-auth.forwardauth.authResponseHeaders=X-Auth-User, X-Secret"


  radarr:
    image: "linuxserver/radarr"
    container_name: "radarr"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONFIG_DIR}/radarr:/config
      - ${EXTHDD_DIR}/downloads:/downloads
      - ${EXTHDD_DIR}/media/movies:/movies
      - "/etc/localtime:/etc/localtime:ro"
    #ports:
      #- 7878:7878
    restart: unless-stopped
    networks:
      - backend
    labels:
      # Traefik Routing
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`radarr.${FQDN}`)"
      - "traefik.http.routers.radarr.entrypoints=websecure"
      - "traefik.http.routers.radarr.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue
      # Require OAuth 2.0 for authentication
      - "traefik.http.middlewares.test-auth.forwardauth.address=https://${FQDN}/oauth2/auth"
      - "traefik.http.middlewares.test-auth.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.test-auth.forwardauth.authResponseHeaders=X-Auth-User, X-Secret"

  lidarr:
    image: linuxserver/lidarr
    container_name: lidarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=022 #optional
    volumes:
      - ${CONFIG_DIR}/lidarr:/config
      - ${EXTHDD_DIR}/downloads:/downloads
      - ${EXTHDD_DIR}/media/music:/music
      #- "/etc/localtime:/etc/localtime:ro"
    #ports:
      #- 8686:8686
    restart: unless-stopped
    networks:
      - backend
    labels:
      # Traefik Routing
      - "traefik.enable=true"
      - "traefik.http.routers.lidarr.rule=Host(`lidarr.${FQDN}`)"
      - "traefik.http.routers.lidarr.entrypoints=websecure"
      - "traefik.http.routers.lidarr.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue
      # Require OAuth 2.0 for authentication
      - "traefik.http.middlewares.test-auth.forwardauth.address=https://${FQDN}/oauth2/auth"
      - "traefik.http.middlewares.test-auth.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.test-auth.forwardauth.authResponseHeaders=X-Auth-User, X-Secret"

  jackett:
    image: linuxserver/jackett
    container_name: jackett
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONFIG_DIR}/jackett:/config
      - ${VOLUME_DIR}/jackett:/downloads
      - "/etc/localtime:/etc/localtime:ro"
    #ports:
      #- 9117:9117
    restart: unless-stopped
    networks:
      - backend
    labels:
      # Traefik Routing
      - "traefik.enable=true"
      - "traefik.http.routers.jackett.rule=Host(`jackett.${FQDN}`)"
      - "traefik.http.routers.jackett.entrypoints=websecure"
      - "traefik.http.routers.jackett.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue
      # Require OAuth 2.0 for authentication
      #- "traefik.http.middlewares.test-auth.forwardauth.address=https://${FQDN}/oauth2/auth"
      #- "traefik.http.middlewares.test-auth.forwardauth.trustForwardHeader=true"
      #- "traefik.http.middlewares.test-auth.forwardauth.authResponseHeaders=X-Auth-User, X-Secret"

########################################################################################
# Media
# https://hub.docker.com/r/linuxserver/plex
# https://hub.docker.com/r/linuxserver/tautulli
########################################################################################

  plex:
    image: linuxserver/plex
    container_name: plex
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - VERSION=docker
    volumes:
      - ${CONFIG_DIR}/plex/config:/config
      - ${EXTHDD_DIR}/media:/data
      #- ${EXTHDD_DIR}/media/tv:/data/tvshows
      #- ${EXTHDD_DIR}/media/movies:/data/movies
      #- ${EXTHDD_DIR}/media/music:/data/music
      #- ${EXTHDD_DIR}/media/other:/data/other
      - ${CONFIG_DIR}/plex/transcode:/transcode
    restart: unless-stopped

  tautulli:
    image: linuxserver/tautulli
    container_name: tautulli
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONFIG_DIR}/plex/tautulli:/config
      - ${CONFIG_DIR}/plex/Config/Library/Application Support/Plex Media Server/Logs:/logs:ro #Map this to Plex log directory - recommended RO.
    #ports:
      #- 8181:8181
    restart: unless-stopped
    networks:
      - backend
    labels:
      # Traefik Routing
      - "traefik.enable=true"
      - "traefik.http.routers.tautulli.rule=Host(`tautulli.${FQDN}`)"
      - "traefik.http.routers.tautulli.entrypoints=websecure"
      - "traefik.http.routers.tautulli.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue
      # Require OAuth 2.0 for authentication
      - "traefik.http.middlewares.test-auth.forwardauth.address=https://${FQDN}/oauth2/auth"
      - "traefik.http.middlewares.test-auth.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.test-auth.forwardauth.authResponseHeaders=X-Auth-User, X-Secret"

########################################################################################
# Organize
# https://hub.docker.com/r/linuxserver/heimdall/
########################################################################################

  heimdall:
    image: linuxserver/heimdall
    container_name: heimdall
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONFIG_DIR}/heimdall:/config
    #ports:
      #- 80:80
      #- 443:443
    restart: unless-stopped
    networks:
      - backend
    labels:
      # Traefik Routing
      - "traefik.enable=true"
      - "traefik.http.routers.heimdall.rule=Host(`${FQDN}`)"
      - "traefik.http.routers.heimdall.entrypoints=websecure"
      - "traefik.http.routers.heimdall.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue
      # Require OAuth 2.0 for authentication
      - "traefik.http.middlewares.test-auth.forwardauth.address=https://${FQDN}/oauth2/auth"
      - "traefik.http.middlewares.test-auth.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.test-auth.forwardauth.authResponseHeaders=X-Auth-User, X-Secret"

########################################################################################
# Pihole
# https://github.com/pi-hole/docker-pi-hole/
# https://docs.pi-hole.net/
########################################################################################

  pihole:
    container_name: pihole
    domainname: docker
    hostname: pihole
    image: pihole/pihole:latest
    ports:
      - '53:53/tcp'
      - '53:53/udp'
      # - '67:67/udp'
      #- 'XXXX:80'
      #- 'YYYY:443'
    restart: unless-stopped
    volumes:
      - ${CONFIG_DIR}/pihole/pihole:/etc/pihole
      - ${CONFIG_DIR}/pihole/pihole.log:/var/log/pihole.log
      - ${CONFIG_DIR}/pihole/dnsmask.d:/etc/dnsmasq.d
    # Recommended but not required (DHCP needs NET_ADMIN)
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    cap_add:
      - NET_ADMIN
    networks:
      - backend
    environment:
      - ServerIP=192.168.1.15
      - PROXY_LOCATION=pihole
      - VIRTUAL_HOST=${FQDN}/pihole
      - VIRTUAL_PORT=80
      - TZ=${TZ}
      #- WEBPASSWORD=RandomWhenCommentedOut
      - DNS1=127.0.0.1
      - DNS2=1.1.1.1
      #- DNS2=1.0.0.1
    labels:
      # Traefik Routing
      - "traefik.enable=true"
      - "traefik.http.routers.pihole.rule=Host(`pihole.${FQDN}`)"
      - "traefik.http.routers.pihole.entrypoints=websecure"
      - "traefik.http.routers.pihole.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue

########################################################################################
# Portainer
# https://hub.docker.com/r/portainer/portainer
########################################################################################

  portainer:
    image: portainer/portainer
    container_name: portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${CONFIG_DIR}/portainer:/data
    environment:
      - TZ=${TZ}
    #ports:
      #- 9000:9000
    restart: unless-stopped
    networks:
      - backend
    labels:
      # Traefik Routing
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${FQDN}`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue

########################################################################################
# Backup Stack
# https://hub.docker.com/_/postgres
# https://hub.docker.com/_/nextcloud
# https://hub.docker.com/r/duplicati/duplicati/
# Volumes are at bottom of yaml file
########################################################################################

#  db:
#    container_name: MariaDB
#    image: mariadb:latest
#    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
#    restart: unless-stopped
#    volumes:
#      - db:/var/lib/mysql
#    environment:
#      - MYSQL_ROOT_PASSWORD=
#      - MYSQL_PASSWORD=
#      - MYSQL_DATABASE=nextcloud
#      - MYSQL_USER=nextcloud

  db1:
    image: postgres
    container_name: postgres1
    restart: unless-stopped
    volumes:
      - db1:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=whatever
      - POSTGRES_DB=guacamole_db
      # Do not create the 'nextcloud' database here. Doing so will cause the Nextcloud installation to fail. The nextcloud container handles this automatically; however, you must create at least one other database first (for example: whatever).
      #- POSTGRES_DB=nextcloud
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend

  nextcloud:
    image: nextcloud:latest
    container_name: nextcloud
    #ports:
      #- 8081:80
    links:
      - db1
    volumes:
      - ${CONFIG_DIR}/nextcloud:/var/www/html #config directory
      - ${VOLUME_DIR}/nextcloud:/var/www/html/data:rw #data directory
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - POSTGRES_HOST=db1
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - NEXTCLOUD_ADMIN_USER=${USERNAME}
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_PASSWORD}
      - NEXTCLOUD_TRUSTED_DOMAINS=nextcloud.${FQDN}
    domainname: nextcloud.${FQDN}
    networks:
      - backend
    labels:
      # Traefik Routing
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud.rule=Host(`nextcloud.${FQDN}`)"
      - "traefik.http.routers.nextcloud.entrypoints=websecure"
      - "traefik.http.routers.nextcloud.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue

  duplicati:
    image: duplicati/duplicati:linux-arm32v7-latest
    container_name: duplicati
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONFIG_DIR}/duplicati:/data #config directory
      - ${VOLUME_DIR}/duplicati:/backups #local backups
      - ${EXTHDD_DIR}:/source #backup source directory
    #ports:
      #- 8200:8200
    restart: unless-stopped
    networks:
      - backend
    labels:
      # Traefik Routing
      - "traefik.enable=true"
      - "traefik.http.routers.duplicati.rule=Host(`duplicati.${FQDN}`)"
      - "traefik.http.routers.duplicati.entrypoints=websecure"
      - "traefik.http.routers.duplicati.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue

volumes:
  db1:
    external: true
    name: db1
    #run: docker volume create --name=db1

networks:
  frontend:
    external:
      name: frontend
      #run: docker network create --name=frontend
  backend:
    external:
      name: backend
      #run: docker network create --name=backend
